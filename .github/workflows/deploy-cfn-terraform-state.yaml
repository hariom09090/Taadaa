name: CloudFormation Plan and Deploy

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

permissions:
  id-token: write
  contents: read
  pull-requests: write
  actions: read

env:
  AWS_REGION: ap-south-1
  CFN_FOLDER: Actions-CFN

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed_files: ${{ steps.diff.outputs.changed_files }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Get Changed Files
        id: diff
        run: |
          echo "🕵️ Detecting CFN template changes..."
          files=$(git diff --name-only HEAD^ HEAD -- "${{ env.CFN_FOLDER }}/*.yaml" "${{ env.CFN_FOLDER }}/*.yml")
          echo "📄 Changed files:"
          echo "$files"
          if [ -z "$files" ]; then
            echo "changed_files=[]" >> $GITHUB_OUTPUT
          else
            json=$(echo "$files" | jq -R -s -c 'split("\n") | map(select(length>0))')
            echo "changed_files=$json" >> $GITHUB_OUTPUT
          fi

  deploy:
    needs: detect-changes
    if: needs.detect-changes.outputs.changed_files != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        file: ${{ fromJson(needs.detect-changes.outputs.changed_files) }}
    concurrency:
      group: cfn-${{ matrix.file }}
      cancel-in-progress: true

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify AWS Identity
        run: aws sts get-caller-identity

      - name: Validate CFN Template – ${{ matrix.file }}
        run: |
          echo "✅ Validating CFN Template: ${{ matrix.file }}"
          aws cloudformation validate-template --template-body file://${{ matrix.file }}

      - name: Create Change Set for PR
        if: github.event_name == 'pull_request'
        run: |
          TEMPLATE="${{ matrix.file }}"
          STACK=$(basename "$TEMPLATE" | sed -E 's/\.(yaml|yml)$//')
          CHANGE_SET_NAME="${STACK}-pr-${{ github.event.number }}"
          STACK_EXISTS=$(aws cloudformation describe-stacks --stack-name "$STACK" --region "$AWS_REGION" --query "Stacks[0].StackName" --output text 2>/dev/null || echo "false")
          if [ "$STACK_EXISTS" == "false" ]; then
            aws cloudformation create-change-set \
              --stack-name "$STACK" \
              --change-set-name "$CHANGE_SET_NAME" \
              --template-body file://"$TEMPLATE" \
              --capabilities CAPABILITY_NAMED_IAM \
              --region "$AWS_REGION" \
              --change-set-type CREATE > /dev/null
          else
            aws cloudformation create-change-set \
              --stack-name "$STACK" \
              --change-set-name "$CHANGE_SET_NAME" \
              --template-body file://"$TEMPLATE" \
              --capabilities CAPABILITY_NAMED_IAM \
              --region "$AWS_REGION" \
              --change-set-type UPDATE > /dev/null
          fi
          aws cloudformation wait change-set-create-complete \
            --stack-name "$STACK" \
            --change-set-name "$CHANGE_SET_NAME" \
            --region "$AWS_REGION" > /dev/null || echo "Change set creation failed or no changes."
          CHANGE_SET_DETAILS=$(aws cloudformation describe-change-set \
            --stack-name "$STACK" \
            --change-set-name "$CHANGE_SET_NAME" \
            --region "$AWS_REGION" \
            --query "Changes[].ResourceChange" \
            --output json || echo "[]")
          echo "CHANGE_SET_DETAILS=$CHANGE_SET_DETAILS" >> $GITHUB_ENV
          echo "STACK_NAME=$STACK" >> $GITHUB_ENV

      - name: Comment on PR with Change Set Details
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const changeSetDetails = process.env.CHANGE_SET_DETAILS;
            const stackName = "${{ env.STACK_NAME }}";
            const templatePath = "${{ matrix.file }}";
            const body = `
            ### CloudFormation Change Set Details
            **Stack:** \`${stackName}\`  
            **Template:** \`${templatePath}\`
            **Change Set Details:**
            \`\`\`json
            ${changeSetDetails}
            \`\`\`
            `;
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });

      - name: Deploy CFN Stack – ${{ matrix.file }}
        if: github.event_name == 'push'
        run: |
          TEMPLATE="${{ matrix.file }}"
          STACK=$(basename "$TEMPLATE" | sed -E 's/\.(yaml|yml)$//')
          echo "🚀 Deploying stack '$STACK' from template '$TEMPLATE'..."
          STATUS=$(aws cloudformation describe-stacks \
            --stack-name "$STACK" \
            --region $AWS_REGION \
            --query "Stacks[0].StackStatus" \
            --output text 2>/dev/null || echo "NOT_FOUND")
          if [ "$STATUS" = "ROLLBACK_COMPLETE" ]; then
            echo "⚠️ Stack in ROLLBACK_COMPLETE – deleting before fresh deploy."
            aws cloudformation delete-stack --stack-name "$STACK" --region $AWS_REGION
            aws cloudformation wait stack-delete-complete --stack-name "$STACK" --region $AWS_REGION
          fi
          aws cloudformation deploy \
            --template-file "$TEMPLATE" \
            --stack-name "$STACK" \
            --capabilities CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset
          echo "✨ Deployment complete for: $STACK"
          echo "STACK_NAME=$STACK" >> $GITHUB_ENV

      - name: Log Deployment Summary
        if: github.event_name == 'push'
        run: |
          echo "🚀 CFN Deployment Summary"
          echo "• Template: ${{ matrix.file }}"
          echo "• Stack: ${{ env.STACK_NAME }}"
          echo "• View in AWS Console: https://${{ env.AWS_REGION }}.console.aws.amazon.com/cloudformation/home?region=${{ env.AWS_REGION }}#/stacks/stackinfo?filteringStatus=active&filteringText=${{ env.STACK_NAME }}"

      - name: Dump CFN Error and Comment on PR (on Failure)
        if: failure()
        run: |
          echo "🧠 Diagnosing CFN deployment failure..."
          if [ -z "${{ env.STACK_NAME }}" ]; then
            ERR="Stack name not set. Likely failed before stack creation."
          else
            ERR=$(aws cloudformation describe-stack-events \
              --stack-name "${{ env.STACK_NAME }}" \
              --region $AWS_REGION \
              --query "StackEvents[?ResourceStatus=='CREATE_FAILED'] | [0].ResourceStatusReason" \
              --output text 2>/dev/null || echo "Unknown error")
          fi
          echo "💥 Error: $ERR"
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "### ❌ CloudFormation Change Set Creation Failed" > comment.txt
            echo "**Stack:** \`${{ env.STACK_NAME }}\`" >> comment.txt
            echo "**Template:** \`${{ matrix.file }}\`" >> comment.txt
            echo "🚫 **Error:**" >> comment.txt
            echo "\`\`\`" >> comment.txt
            echo "$ERR" >> comment.txt
            echo "\`\`\`" >> comment.txt
            echo "Please review and adjust the template." >> comment.txt
          else
            echo "Push event failure logged; no PR to comment on."
          fi

      - name: Comment in PR (on Failure)
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const body = fs.readFileSync('comment.txt', 'utf8');
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });