name: CloudFormation Plan and Deploy

on:
  push:
    branches: [github-actions]
    paths:
      - 'Actions-CFN/**/*.yaml'
      - 'Actions-CFN/**/*.yml'

permissions:
  id-token: write
  contents: read
  pull-requests: write
  actions: read

env:
  AWS_REGION: ap-south-1
  CFN_FOLDER: Actions-CFN

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed_files: ${{ steps.diff.outputs.changed_files }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Get Changed Files
        id: diff
        run: |
          echo "üïµÔ∏è Detecting CFN template changes..."
          files=$(git diff --name-only HEAD^ HEAD -- "${{ env.CFN_FOLDER }}/*.yaml" "${{ env.CFN_FOLDER }}/*.yml")
          echo "üìÑ Changed files:"
          echo "$files"
          if [ -z "$files" ]; then
            echo "changed_files=[]" >> $GITHUB_OUTPUT
          else
            json=$(echo "$files" | jq -R -s -c 'split("\n") | map(select(length>0))')
            echo "changed_files=$json" >> $GITHUB_OUTPUT
          fi

  deploy:
    needs: detect-changes
    if: needs.detect-changes.outputs.changed_files != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        file: ${{ fromJson(needs.detect-changes.outputs.changed_files) }}
    concurrency:
      group: cfn-${{ matrix.file }}
      cancel-in-progress: true

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify AWS Identity
        run: aws sts get-caller-identity

      - name: Validate CFN Template ‚Äì ${{ matrix.file }}
        run: |
          echo "‚úÖ Validating CFN Template: ${{ matrix.file }}"
          aws cloudformation validate-template --template-body file://${{ matrix.file }}

      - name: Deploy CFN Stack ‚Äì ${{ matrix.file }}
        run: |
          TEMPLATE="${{ matrix.file }}"
          STACK=$(basename "$TEMPLATE" | sed -E 's/\.(yaml|yml)$//')
          echo "üöÄ Deploying stack '$STACK' from template '$TEMPLATE'..."

          # Auto-remediate ROLLBACK_COMPLETE
          STATUS=$(aws cloudformation describe-stacks \
            --stack-name "$STACK" \
            --region $AWS_REGION \
            --query "Stacks[0].StackStatus" \
            --output text 2>/dev/null || echo "NOT_FOUND")
          if [ "$STATUS" = "ROLLBACK_COMPLETE" ]; then
            echo "‚ö†Ô∏è Stack in ROLLBACK_COMPLETE ‚Äì deleting before fresh deploy."
            aws cloudformation delete-stack --stack-name "$STACK" --region $AWS_REGION
            aws cloudformation wait stack-delete-complete --stack-name "$STACK" --region $AWS_REGION
          fi

          aws cloudformation deploy \
            --template-file "$TEMPLATE" \
            --stack-name "$STACK" \
            --capabilities CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset
          echo "‚ú® Deployment complete for: $STACK"
          echo "STACK_NAME=$STACK" >> $GITHUB_ENV

      - name: Post Deployment Summary
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const region = process.env.AWS_REGION;
            const stack = process.env.STACK_NAME;
            const template = `${{ matrix.file }}`;
            const url = `https://${region}.console.aws.amazon.com/cloudformation/home?region=${region}#/stacks/stackinfo?filteringStatus=active&filteringText=${stack}`;
            const body = `
            ### üöÄ CFN Deployment Summary
            ‚Ä¢ **Template:** \`${template}\`  
            ‚Ä¢ **Stack:** \`${stack}\`  
            ‚Ä¢ üîó [View in AWS Console](${url})

            üîÅ Triggered by: @${{ github.actor }} via \`${{ github.event_name }}\`
            `;
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });

      - name: Dump CFN Error and Comment in PR
        if: failure()
        run: |
          echo "üß† Diagnosing CFN deployment failure..."
          ERR=$(aws cloudformation describe-stack-events \
            --stack-name "${{ env.STACK_NAME }}" \
            --region $AWS_REGION \
            --query "StackEvents[?ResourceStatus=='CREATE_FAILED'] | [0].ResourceStatusReason" \
            --output text || echo "Unknown error")
          echo "üí• Error: $ERR"
          cat <<EOF > comment.txt
          ### ‚ùå CloudFormation Deployment Failed
          **Stack:** \`${{ env.STACK_NAME }}\`  
          **Template:** \`${{ matrix.file }}\`
          üö´ **Error:**  
          \`\`\`
          $ERR
          \`\`\`
          Please review and reapply.
          EOF

      - name: Comment in PR (on failure)
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const body = fs.readFileSync('comment.txt', 'utf8');
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });
