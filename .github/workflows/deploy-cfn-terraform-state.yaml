name: CloudFormation Plan and Deploy

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

permissions:
  id-token: write
  contents: read
  pull-requests: write
  actions: read

env:
  AWS_REGION: ap-south-1
  CFN_FOLDER: Actions-CFN

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed_files: ${{ steps.diff.outputs.changed_files }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get Changed Files
        id: diff
        run: |
          echo "🕵️ Detecting CFN template changes..."
          if [ "${{ github.event_name }}" = "push" ]; then
            files=$(git diff --name-only origin/main^ origin/main -- "${{ env.CFN_FOLDER }}/*.yaml" "${{ env.CFN_FOLDER }}/*.yml")
          else
            files=$(git diff --name-only origin/main HEAD -- "${{ env.CFN_FOLDER }}/*.yaml" "${{ env.CFN_FOLDER }}/*.yml")
          fi
          echo "📄 Changed files:"
          echo "$files"
          if [ -z "$files" ]; then
            echo "changed_files=[]" >> $GITHUB_OUTPUT
          else
            json=$(echo "$files" | jq -R -s -c 'split("\n") | map(select(length>0))')
            echo "changed_files=$json" >> $GITHUB_OUTPUT
          fi

  plan:
    needs: detect-changes
    if: github.event_name == 'pull_request' && needs.detect-changes.outputs.changed_files != '[]'
    runs-on: ubuntu-latest
    outputs:
      change_set_names: ${{ steps.change-set.outputs.change_set_names }}
    strategy:
      matrix:
        file: ${{ fromJson(needs.detect-changes.outputs.changed_files) }}
    concurrency:
      group: cfn-plan-${{ matrix.file }}-${{ github.event.number }}
      cancel-in-progress: true

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify AWS Identity
        run: aws sts get-caller-identity

      - name: Validate CFN Template – ${{ matrix.file }}
        run: |
          echo "✅ Validating CFN Template: ${{ matrix.file }}"
          aws cloudformation validate-template --template-body file://${{ matrix.file }}

      - name: Check Stack Existence and Create Change Set
        id: change-set
        run: |
          TEMPLATE="${{ matrix.file }}"
          STACK=$(basename "$TEMPLATE" .yaml | sed 's/\.yml$//')
          echo "STACK_NAME=$STACK" >> $GITHUB_ENV
          CHANGE_SET_NAME="${STACK}-pr-${{ github.event.number }}"
          echo "CHANGE_SET_NAME=$CHANGE_SET_NAME" >> $GITHUB_ENV
          
          # Check if stack exists
          if aws cloudformation describe-stacks --stack-name "$STACK" --region "${{ env.AWS_REGION }}" >/dev/null 2>&1; then
            CHANGE_SET_TYPE="UPDATE"
            echo "Stack $STACK exists. Creating UPDATE change set."
          else
            CHANGE_SET_TYPE="CREATE"
            echo "Stack $STACK does not exist. Creating CREATE change set."
          fi
          
          # Delete existing change set if it exists
          if aws cloudformation describe-change-set --stack-name "$STACK" --change-set-name "$CHANGE_SET_NAME" --region "${{ env.AWS_REGION }}" >/dev/null 2>&1; then
            aws cloudformation delete-change-set --stack-name "$STACK" --change-set-name "$CHANGE_SET_NAME" --region "${{ env.AWS_REGION }}"
          fi
          
          # Create change set
          aws cloudformation create-change-set \
            --stack-name "$STACK" \
            --change-set-name "$CHANGE_SET_NAME" \
            --template-body file://"$TEMPLATE" \
            --capabilities CAPABILITY_NAMED_IAM \
            --region "${{ env.AWS_REGION }}" \
            --change-set-type "$CHANGE_SET_TYPE" || {
            echo "Failed to create change set" >&2
            exit 1
          }
          
          # Wait for change set to be ready and check status
          aws cloudformation wait change-set-create-complete \
            --stack-name "$STACK" \
            --change-set-name "$CHANGE_SET_NAME" \
            --region "${{ env.AWS_REGION }}" || true
          
          # Verify change set status
          CHANGE_SET_STATUS=$(aws cloudformation describe-change-set \
            --stack-name "$STACK" \
            --change-set-name "$CHANGE_SET_NAME" \
            --region "${{ env.AWS_REGION }}" \
            --query 'Status' \
            --output text)
          CHANGE_SET_REASON=$(aws cloudformation describe-change-set \
            --stack-name "$STACK" \
            --change-set-name "$CHANGE_SET_NAME" \
            --region "${{ env.AWS_REGION }}" \
            --query 'StatusReason' \
            --output text || echo "No reason provided")
          echo "CHANGE_SET_STATUS=$CHANGE_SET_STATUS" >> $GITHUB_ENV
          echo "CHANGE_SET_REASON=$CHANGE_SET_REASON" >> $GITHUB_ENV
          
          if [ "$CHANGE_SET_STATUS" = "FAILED" ]; then
            echo "Change set creation failed: $CHANGE_SET_REASON" >&2
            exit 1
          fi
          
          # Describe change set for PR comment
          CHANGE_SET_DETAILS=$(aws cloudformation describe-change-set \
            --stack-name "$STACK" \
            --change-set-name "$CHANGE_SET_NAME" \
            --region "${{ env.AWS_REGION }}" \
            --query 'Changes[].ResourceChange.{Action:Action,LogicalResourceId:LogicalResourceId,ResourceType:ResourceType,Replacement:Replacement}' \
            --output json | jq -c .)
          echo "CHANGE_SET_DETAILS=$CHANGE_SET_DETAILS" >> $GITHUB_ENV
          echo "CHANGE_SET_TYPE=$CHANGE_SET_TYPE" >> $GITHUB_ENV
          
          # Output change set name for deploy job
          json=$(echo "$CHANGE_SET_NAME" | jq -R -c '[.]')
          echo "change_set_names=$json" >> $GITHUB_OUTPUT

      - name: Comment on PR with Change Set Details
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const details = JSON.parse(process.env.CHANGE_SET_DETAILS);
            const stackName = process.env.STACK_NAME;
            const templatePath = "${{ matrix.file }}";
            const changeSetType = process.env.CHANGE_SET_TYPE;
            let changesTable = '| Action | LogicalResourceId | ResourceType | Replacement |\n';
            changesTable += '|--------|-------------------|--------------|-------------|\n';
            for (const change of details) {
              changesTable += `| ${change.Action} | ${change.LogicalResourceId} | ${change.ResourceType} | ${change.Replacement || 'N/A'} |\n`;
            }
            const body = `
            ### CloudFormation Change Set
            **Stack:** \`${stackName}\`  
            **Template:** \`${templatePath}\`  
            **Change Set Type:** \`${changeSetType}\`  
            **Changes:**
            ${changesTable}
            `;
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });

      - name: Comment on PR with Failure Details
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const stackName = process.env.STACK_NAME || 'Unknown';
            const templatePath = "${{ matrix.file }}";
            const changeSetReason = process.env.CHANGE_SET_REASON || 'Unknown error';
            const body = `
            ### ❌ CloudFormation Change Set Creation Failed
            **Stack:** \`${stackName}\`  
            **Template:** \`${templatePath}\`  
            **Error:** ${changeSetReason}
            Please check the GitHub Actions logs for more details.
            `;
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });

  deploy:
    needs: detect-changes
    if: github.event_name == 'push' && needs.detect-changes.outputs.changed_files != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        file: ${{ fromJson(needs.detect-changes.outputs.changed_files) }}
    concurrency:
      group: cfn-deploy-${{ matrix.file }}
      cancel-in-progress: true

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Extract PR Number
        id: extract-pr
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          if [[ $COMMIT_MSG =~ Merge\ pull\ request\ \#([0-9]+) ]]; then
            echo "pr_number=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
          else
            echo "pr_number=" >> $GITHUB_OUTPUT
          fi

      - name: Execute Existing Change Set or Deploy
        id: deploy
        run: |
          TEMPLATE="${{ matrix.file }}"
          STACK=$(basename "$TEMPLATE" .yaml | sed 's/\.yml$//')
          echo "STACK_NAME=$STACK" >> $GITHUB_ENV
          CHANGE_SET_NAME="${STACK}-pr-${{ steps.extract-pr.outputs.pr_number }}"
          
          # Check if stack exists
          if aws cloudformation describe-stacks --stack-name "$STACK" --region "${{ env.AWS_REGION }}" >/dev/null 2>&1; then
            STATUS=$(aws cloudformation describe-stacks \
              --stack-name "$STACK" \
              --region "${{ env.AWS_REGION }}" \
              --query "Stacks[0].StackStatus" \
              --output text 2>/dev/null || echo "NOT_FOUND")
            if [ "$STATUS" = "ROLLBACK_COMPLETE" ]; then
              aws cloudformation delete-stack --stack-name "$STACK" --region "${{ env.AWS_REGION }}"
              aws cloudformation wait stack-delete-complete --stack-name "$STACK" --region "${{ env.AWS_REGION }}"
            fi
          fi
          
          # Check if change set exists from PR
          if [ -n "${{ steps.extract-pr.outputs.pr_number }}" ] && aws cloudformation describe-change-set \
            --stack-name "$STACK" \
            --change-set-name "$CHANGE_SET_NAME" \
            --region "${{ env.AWS_REGION }}" >/dev/null 2>&1; then
            echo "Executing existing change set: $CHANGE_SET_NAME"
            aws cloudformation execute-change-set \
              --stack-name "$STACK" \
              --change-set-name "$CHANGE_SET_NAME" \
              --region "${{ env.AWS_REGION }}"
            aws cloudformation wait stack-update-complete \
              --stack-name "$STACK" \
              --region "${{ env.AWS_REGION }}" || aws cloudformation wait stack-create-complete \
              --stack-name "$STACK" \
              --region "${{ env.AWS_REGION }}"
          else
            echo "No change set found or no PR number. Falling back to deploy command."
            aws cloudformation deploy \
              --template-file "$TEMPLATE" \
              --stack-name "$STACK" \
              --capabilities CAPABILITY_NAMED_IAM \
              --no-fail-on-empty-changeset \
              --region "${{ env.AWS_REGION }}"
          fi

      - name: Clean Up Change Set
        if: always() && steps.extract-pr.outputs.pr_number
        run: |
          STACK="${{ env.STACK_NAME }}"
          CHANGE_SET_NAME="${STACK}-pr-${{ steps.extract-pr.outputs.pr_number }}"
          if aws cloudformation describe-change-set \
            --stack-name "$STACK" \
            --change-set-name "$CHANGE_SET_NAME" \
            --region "${{ env.AWS_REGION }}" >/dev/null 2>&1; then
            aws cloudformation delete-change-set \
              --stack-name "$STACK" \
              --change-set-name "$CHANGE_SET_NAME" \
              --region "${{ env.AWS_REGION }}"
          fi

      - name: Comment on PR with Deployment Success
        if: success() && steps.extract-pr.outputs.pr_number
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = ${{ steps.extract-pr.outputs.pr_number }};
            const stackName = process.env.STACK_NAME;
            const templatePath = "${{ matrix.file }}";
            const body = `
            ### ✅ CloudFormation Deployment Successful
            **Stack:** \`${stackName}\`  
            **Template:** \`${templatePath}\`  
            The stack has been successfully deployed.
            `;
            await github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });

      - name: Comment on PR with Deployment Failure
        if: failure() && steps.extract-pr.outputs.pr_number
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = ${{ steps.extract-pr.outputs.pr_number }};
            const stackName = process.env.STACK_NAME;
            const templatePath = "${{ matrix.file }}";
            const body = `
            ### ❌ CloudFormation Deployment Failed
            **Stack:** \`${stackName}\`  
            **Template:** \`${templatePath}\`  
            **Error:** Check the GitHub Actions logs for details.
            `;
            await github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });